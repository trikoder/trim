import { _ as _export_sfc, o as openBlock, c as createElementBlock, Q as createStaticVNode } from "./chunks/framework.50d1116b.js";
const __pageData = JSON.parse('{"title":"About","description":"","frontmatter":{},"headers":[],"relativePath":"about.md","filePath":"about.md"}');
const _sfc_main = { name: "about.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="about" tabindex="-1">About <a class="header-anchor" href="#about" aria-label="Permalink to &quot;About&quot;">​</a></h1><p>Trikoder Trim is user interface framework for building headless content management systems that connect to JSON API powered backend. Craft responsive single page applications that work on all devices.</p><p>Content management systems built on top of Trikoder Trim are decoupled from server side technology stack. UI framework works nicely with any server side technology that can process and render json api dataset compliant with <a href="http://jsonapi.org/" target="_blank" rel="noreferrer">json:api specification</a>.</p><p>Trim enables you to quickly build administration CRUD (create, read, update, delete) interface for your application resources. Resulting CMS is responsive and fast - all styles and behavior for standard use cases come included - programmers job is only to define how each application resource is listed and edited.</p><p>Sensible dependency on standardized backend api enables us to create CMS domain specific language or api in javascript that is pretty much decoupled from JS libraries and frameworks that are used underneath. Any capable programmer should be able to define complete interface for resource in need of administration.</p><h2 id="technology-and-tooling" tabindex="-1">Technology and tooling <a class="header-anchor" href="#technology-and-tooling" aria-label="Permalink to &quot;Technology and tooling&quot;">​</a></h2><p>Trikoder Trim is built on following open source stack:</p><ul><li><a href="https://vuejs.org/" target="_blank" rel="noreferrer">Vue</a>, <a href="https://router.vuejs.org/" target="_blank" rel="noreferrer">Vue Router</a> and <a href="https://vuex.vuejs.org/" target="_blank" rel="noreferrer">Vuex</a> are used for application views, routing and store management.</li><li><a href="https://github.com/axios/axios" target="_blank" rel="noreferrer">Axios</a> is used as http client</li><li><a href="https://dbrekalo.github.io/json-api-resource/" target="_blank" rel="noreferrer">JSON api resource</a> is used for querying and persisting resources</li><li><a href="https://vitejs.dev/" target="_blank" rel="noreferrer">Vite</a> or <a href="https://webpack.js.org/" target="_blank" rel="noreferrer">Webpack</a> is used for module bundling and code splitting</li></ul><h2 id="code-sneek-peek" tabindex="-1">Code sneek peek <a class="header-anchor" href="#code-sneek-peek" aria-label="Permalink to &quot;Code sneek peek&quot;">​</a></h2><p>Lets assume your application has a simple &quot;tag&quot; resource and backend api for this resource is ready. You want to show list of tags that can be filtered by title. Additionally you want to setup create and edit interface with input for setting tag title. Your code should end up looking something like this:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    resourceName: </span><span style="color:#9ECBFF;">&#39;tag&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setupList</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">({</span><span style="color:#FFAB70;">list</span><span style="color:#E1E4E8;">}) {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">addCreateControl</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Create new tag&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        list.</span><span style="color:#B392F0;">addFilter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;TextFormElement&#39;</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            name: </span><span style="color:#9ECBFF;">&#39;title&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            label: </span><span style="color:#9ECBFF;">&#39;Title&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        list.</span><span style="color:#B392F0;">addItem</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;TextListItem&#39;</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            caption: </span><span style="color:#9ECBFF;">&#39;ID&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            mapTo: </span><span style="color:#9ECBFF;">&#39;id&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        list.</span><span style="color:#B392F0;">addItem</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;LinkListItem&#39;</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            caption: </span><span style="color:#9ECBFF;">&#39;Title&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            mapTo: </span><span style="color:#9ECBFF;">&#39;title&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            action: </span><span style="color:#9ECBFF;">&#39;editItem&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setupEdit</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">({</span><span style="color:#FFAB70;">edit</span><span style="color:#E1E4E8;">}) {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">addToIndexControl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addSaveControl</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        edit.</span><span style="color:#B392F0;">addField</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;TextFormElement&#39;</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            label: </span><span style="color:#9ECBFF;">&#39;Title&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            name: </span><span style="color:#9ECBFF;">&#39;title&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h2 id="demo-application" tabindex="-1">Demo application <a class="header-anchor" href="#demo-application" aria-label="Permalink to &quot;Demo application&quot;">​</a></h2><p>Visit <a href="https://trikoder.github.io/trim/demo/index.html" target="_blank" rel="noreferrer">demo application</a> to get a feeling how CMS built with Trikoder CMF looks and behaves. Is is completely safe to browse, edit and delete items - backend api on demo pages is running on client json api server that stores data in browser memory - so no harm can be done. Dataset can be reset by clicking &quot;reset demo data&quot; control in lower left corner of administration UI. Examine how everything is composed in <a href="https://github.com/trikoder/trim/tree/master/demo" target="_blank" rel="noreferrer">demo codebase</a>.</p><p>Feel free to browse, cut and paste from demo codebase for your CMS needs and use it as reference.</p>', 14);
const _hoisted_15 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_15);
}
const about = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  about as default
};
