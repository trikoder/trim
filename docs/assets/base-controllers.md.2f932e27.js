import { _ as _export_sfc, o as openBlock, c as createElementBlock, Q as createStaticVNode } from "./chunks/framework.50d1116b.js";
const __pageData = JSON.parse('{"title":"Base controllers","description":"","frontmatter":{},"headers":[],"relativePath":"base-controllers.md","filePath":"base-controllers.md"}');
const _sfc_main = { name: "base-controllers.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="base-controllers" tabindex="-1">Base controllers <a class="header-anchor" href="#base-controllers" aria-label="Permalink to &quot;Base controllers&quot;">​</a></h1><p>Trim includes a number of predefined UI base controllers for common use cases. Beside resource controller that is most frequently extended base controllers for resource edit, nested resource and media resource are available.</p><h2 id="resource-controller" tabindex="-1">Resource controller <a class="header-anchor" href="#resource-controller" aria-label="Permalink to &quot;Resource controller&quot;">​</a></h2><p>Used when you need to define how resource is browsed, filtered and sorted in list, what form fields are rendered when resource is created or updated. Example <a href="https://trikoder.github.io/trim/demo/index.html#page" target="_blank" rel="noreferrer">demo controller</a> and <a href="https://github.com/trikoder/trim/tree/master/demo/controllers/page.js" target="_blank" rel="noreferrer">codebase</a>.</p><p>Code example:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    resourceName: </span><span style="color:#9ECBFF;">&#39;tag&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setupList</span><span style="color:#E1E4E8;">({</span><span style="color:#FFAB70;">list</span><span style="color:#E1E4E8;">}) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// how is resource listed?</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setupEdit</span><span style="color:#E1E4E8;">({</span><span style="color:#FFAB70;">edit</span><span style="color:#E1E4E8;">}) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// how is resource edited?</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p>Sometimes empty resource is required for meaningful create admin interface. In this case draft resource is created on api (with id but no attributes and relation data) and edited in UI immediately.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    resourceName: </span><span style="color:#9ECBFF;">&#39;tag&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    createRequiresDraft: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p>Explicit included relations and data can be specifed on resource controller index and edit actions:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    resourceName: </span><span style="color:#9ECBFF;">&#39;tag&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    includedRelationships: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        index: [</span><span style="color:#9ECBFF;">&#39;media&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;author&#39;</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#E1E4E8;">        edit: [</span><span style="color:#9ECBFF;">&#39;media&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;author&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;author.media&#39;</span><span style="color:#E1E4E8;">]</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p>Default behaviour for resource saving is for related resources to be saved before main resource. Alternate save strategy for main and related resources when resource is created is available by settting &#39;createRelatedStrategy&#39; property on controller to &#39;relatedLast&#39; value.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    resourceName: </span><span style="color:#9ECBFF;">&#39;user&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    createRelatedStrategy: </span><span style="color:#9ECBFF;">&#39;relatedLast&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">...</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h2 id="resource-edit-controller" tabindex="-1">Resource edit controller <a class="header-anchor" href="#resource-edit-controller" aria-label="Permalink to &quot;Resource edit controller&quot;">​</a></h2><p>Used when you want to edit one specific resource and listing is not available. Implement &quot;getModel&quot; method and provide model instance to edit. Example <a href="https://trikoder.github.io/trim/demo/index.html#my-settings" target="_blank" rel="noreferrer">demo controller</a> and <a href="https://github.com/trikoder/trim/tree/master/demo/controllers/mySettings.js" target="_blank" rel="noreferrer">codebase</a>. Code example:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    extendsController: </span><span style="color:#9ECBFF;">&#39;BaseResourceEdit&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getModel</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">Model</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> Model.</span><span style="color:#B392F0;">getFromApi</span><span style="color:#E1E4E8;">({type: </span><span style="color:#9ECBFF;">&#39;user&#39;</span><span style="color:#E1E4E8;">, id: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">}),</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setupEdit</span><span style="color:#E1E4E8;">({</span><span style="color:#FFAB70;">edit</span><span style="color:#E1E4E8;">}) {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">setPageTitle</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;My settings&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">addSaveControl</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        edit.</span><span style="color:#B392F0;">addField</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;TextFormElement&#39;</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            label: </span><span style="color:#9ECBFF;">&#39;Email&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            name: </span><span style="color:#9ECBFF;">&#39;email&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h2 id="nested-resource-controller" tabindex="-1">Nested resource controller <a class="header-anchor" href="#nested-resource-controller" aria-label="Permalink to &quot;Nested resource controller&quot;">​</a></h2><p>Used for hierarchal resources that can be presented in nested tree view form. Categories as resources usually have parent and child categories. Example <a href="https://trikoder.github.io/trim/demo/index.html#category" target="_blank" rel="noreferrer">demo controller</a> and <a href="https://github.com/trikoder/trim/tree/master/demo/controllers/category.js" target="_blank" rel="noreferrer">codebase</a>.</p><p>Lets examine category api response:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;category&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;1&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">attributes</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">title</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Category 1&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">description</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Aenean gravida, orci in sagittis tincidunt, dolor quam pellentesque dolor, nec viverra neque nunc id mi.&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">published</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">imageThumbnailUrl</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;http://pipsum.com/400x300.jpg?v=1&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">imageOriginalUrl</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;http://pipsum.com/1200x900.jpg?v=1&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">relationships</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">parentCategory</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">: {</span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;2&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;category&#39;</span><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">        },</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">childCategories</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">: [</span></span>\n<span class="line"><span style="color:#E1E4E8;">                {id: </span><span style="color:#9ECBFF;">&#39;7&#39;</span><span style="color:#E1E4E8;">, type: </span><span style="color:#9ECBFF;">&#39;category&#39;</span><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">            ]</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>Resource hierarchy is defined via parentCategory and childCategories relations.</p><p>Our category resource controller should extend base nested resource controller. Via resourceConfig property we define parent and children relation mappings.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    resourceName: </span><span style="color:#9ECBFF;">&#39;category&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    extendsController: </span><span style="color:#9ECBFF;">&#39;BaseNestedResource&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    mapParentTo: </span><span style="color:#9ECBFF;">&#39;parentCategory&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    mapChildrenTo: </span><span style="color:#9ECBFF;">&#39;childCategories&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setupList</span><span style="color:#E1E4E8;">({</span><span style="color:#FFAB70;">list</span><span style="color:#E1E4E8;">}) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// how is resource listed?</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setupEdit</span><span style="color:#E1E4E8;">({</span><span style="color:#FFAB70;">edit</span><span style="color:#E1E4E8;">}) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// how is resource edited?</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p>Resource config has following defaults:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">mapParentTo</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;parent&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">mapChildrenTo</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;children&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">mapLevelTo</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">mapIsLeafTo</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">undefined</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">},</span></span></code></pre></div><p>Properties mapChildrenTo, mapLevelTo, mapIsLeafTo can be defined as strings or functions if needed.</p><h2 id="media-resource-controller" tabindex="-1">Media resource controller <a class="header-anchor" href="#media-resource-controller" aria-label="Permalink to &quot;Media resource controller&quot;">​</a></h2><p>Used for browse, create (upload) and edit media resources sush as images or files. Example <a href="https://trikoder.github.io/trim/demo/index.html#media" target="_blank" rel="noreferrer">demo controller</a> and <a href="https://github.com/trikoder/trim/tree/master/demo/controllers/media.js" target="_blank" rel="noreferrer">codebase</a>.</p><p>Lets examine typical media api response:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;media&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;1&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">attributes</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">title</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Media item 1&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">caption</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Aenean gravida, orci in sagittis tincidunt, dolor quam pellentesque dolor, nec viverra neque nunc id mi.&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">mediaType</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;image&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">thumbnailUrl</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;http://pipsum.com/400x300.jpg</span><span style="color:#FDAEB7;font-style:italic;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">originalUrl</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;http://pipsum.com/1200x900.jp</span><span style="color:#FDAEB7;font-style:italic;">g</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>Example media controller is shown bellow. Via resource config propery we define list of media types (image, file, videoEmbed) our controller is handling. For each media type a method for edit handling is defined (setup[MediaType]Edit).</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    extendsController: </span><span style="color:#9ECBFF;">&#39;BaseMediaResource&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    resourceName: </span><span style="color:#9ECBFF;">&#39;media&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    resourceCaption: </span><span style="color:#9ECBFF;">&#39;title&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    mediaTypes: [</span><span style="color:#9ECBFF;">&#39;image&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;file&#39;</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;videoEmbed&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        createPageTitle: </span><span style="color:#9ECBFF;">&#39;Create video embed&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        hasUploadUi: </span><span style="color:#79B8FF;">false</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }],</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setupList</span><span style="color:#E1E4E8;">({</span><span style="color:#FFAB70;">list</span><span style="color:#E1E4E8;">}) {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">addCreateImageControl</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Create new image&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">addDropdownControl</span><span style="color:#E1E4E8;">([{</span></span>\n<span class="line"><span style="color:#E1E4E8;">            caption: </span><span style="color:#9ECBFF;">&#39;Create video embed&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            action: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.openCreateVideoEmbed</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            caption: </span><span style="color:#9ECBFF;">&#39;Upload file&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            action: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.openCreateFile</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }]);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">...</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setupImageEdit</span><span style="color:#E1E4E8;">({</span><span style="color:#FFAB70;">edit</span><span style="color:#E1E4E8;">}) {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">addToIndexControl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addSaveControl</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        edit.</span><span style="color:#B392F0;">addField</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;MediaPreviewFormElement&#39;</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            label: </span><span style="color:#9ECBFF;">&#39;Photography&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            name: </span><span style="color:#9ECBFF;">&#39;mediaPreview&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">...</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setupVideoEmbedEdit</span><span style="color:#E1E4E8;">({</span><span style="color:#FFAB70;">edit</span><span style="color:#E1E4E8;">}) {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">...</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setupFileEdit</span><span style="color:#E1E4E8;">({</span><span style="color:#FFAB70;">edit</span><span style="color:#E1E4E8;">}) {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">...</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p>For our media controller to work properly we have to define following route:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">router.</span><span style="color:#B392F0;">resource</span><span style="color:#E1E4E8;">({name: </span><span style="color:#9ECBFF;">&#39;media&#39;</span><span style="color:#E1E4E8;">, hasCreateRoute: [</span><span style="color:#9ECBFF;">&#39;image&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;videoEmbed&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;file&#39;</span><span style="color:#E1E4E8;">]});</span></span></code></pre></div>', 33);
const _hoisted_34 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_34);
}
const baseControllers = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  baseControllers as default
};
