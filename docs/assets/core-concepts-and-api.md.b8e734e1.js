import { _ as _export_sfc, o as openBlock, c as createElementBlock, Q as createStaticVNode } from "./chunks/framework.50d1116b.js";
const __pageData = JSON.parse('{"title":"Core concepts and api","description":"","frontmatter":{},"headers":[],"relativePath":"core-concepts-and-api.md","filePath":"core-concepts-and-api.md"}');
const _sfc_main = { name: "core-concepts-and-api.md" };
const _hoisted_1 = /* @__PURE__ */ createStaticVNode('<h1 id="core-concepts-and-api" tabindex="-1">Core concepts and api <a class="header-anchor" href="#core-concepts-and-api" aria-label="Permalink to &quot;Core concepts and api&quot;">​</a></h1><p>Understanding of how core components work is essential for building applications with Trikoder Trim. This chapter provides insight into resource controller, resource list, resource edit, router, navigation, service container and application object.</p><h2 id="resource-controller" tabindex="-1">Resource controller <a class="header-anchor" href="#resource-controller" aria-label="Permalink to &quot;Resource controller&quot;">​</a></h2><p>Resource controller component is a central place to define user interface for given resource. Here we define how resource is browsed, filtered and sorted in list, what form fields are rendered when resource is created or updated.</p><p>In most use cases controller looks like a simple configuration file. This configuration based architecture delegates most of the work to components that are composed out of our sight. Resource controller is a container component which calls service components for listing and editing resources who build their own component subtrees - all that is abstracted from user via simple and easy to use api.</p><p>All resource controllers share same basic skeleton. We define what resource type controller is handling (resourceName) and implement methods for resource listing (setupList) and resource editing (setupEdit):</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    resourceName: </span><span style="color:#9ECBFF;">&#39;tag&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setupList</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">({</span><span style="color:#FFAB70;">list</span><span style="color:#E1E4E8;">}) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// how is resource listed?</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setupEdit</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">({</span><span style="color:#FFAB70;">edit</span><span style="color:#E1E4E8;">}) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// how is resource edited?</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p>A list of controller properties and methods is examined bellow:</p><h3 id="resourcename" tabindex="-1">resourceName <a class="header-anchor" href="#resourcename" aria-label="Permalink to &quot;resourceName&quot;">​</a></h3><p>Controller property where we name the resource handled (tag, article, page...)</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">resourceName</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;tag&#39;</span></span></code></pre></div><h3 id="resourcecaption" tabindex="-1">resourceCaption <a class="header-anchor" href="#resourcecaption" aria-label="Permalink to &quot;resourceCaption&quot;">​</a></h3><p>Controller property where we define resource caption mapping, default value is null. It is currently used only in mass actions component as a value for &#39;mapSelectedCaptionsTo&#39; (if it is null, then it fallbacks to &#39;id&#39;) so it&#39;s recommended to always set resource caption value.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">resourceCaption</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;title&#39;</span></span></code></pre></div><h3 id="resourcealias" tabindex="-1">resourceÅlias <a class="header-anchor" href="#resourcealias" aria-label="Permalink to &quot;resourceÅlias&quot;">​</a></h3><p>When 2 or more different UI controllers that connect to same resource (resourceName) are needed this property is used to separate them logically. Resource alias will be used to construct different controller routes and to bind correct selected main navigation item.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">resourceCaption</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;userTag&#39;</span></span></code></pre></div><h3 id="createrequiresdraft" tabindex="-1">createRequiresDraft <a class="header-anchor" href="#createrequiresdraft" aria-label="Permalink to &quot;createRequiresDraft&quot;">​</a></h3><p>Property where we define if draft resource is needed when resource is created. When createRequiresDraft is set to true controller will save empty resource object before creating interface is displayed. Saved draft resource will receive id and be able to support related objects. False is default value.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">createRequiresDraft</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span></span></code></pre></div><h3 id="createrelatedstrategy" tabindex="-1">createRelatedStrategy <a class="header-anchor" href="#createrelatedstrategy" aria-label="Permalink to &quot;createRelatedStrategy&quot;">​</a></h3><p>Property which defines which strategy is used for persisting main and related resources:</p><ul><li>relatedFirst: related resources are saved before main resource (default behavior)</li><li>relatedLast: related resources are saved after main resource is persisted</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">createRelatedStrategy</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;relatedFirst&#39;</span></span></code></pre></div><h3 id="includedrelationships" tabindex="-1">includedRelationships <a class="header-anchor" href="#includedrelationships" aria-label="Permalink to &quot;includedRelationships&quot;">​</a></h3><p>Specify relationships to include in api payload for resource listing (index) and editing (edit) Previously named &quot;includeApiData&quot; in versions up to v0.77, now deprecated.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">includedRelationships</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&#39;category&#39;</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">edit</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&#39;category&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;author&#39;</span><span style="color:#E1E4E8;">]</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h3 id="includedfields-sparse-fieldsets" tabindex="-1">includedFields (sparse fieldsets) <a class="header-anchor" href="#includedfields-sparse-fieldsets" aria-label="Permalink to &quot;includedFields (sparse fieldsets)&quot;">​</a></h3><p>Specify fields to include in api payload for resource listing (index) and editing (edit)</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">includedFields</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">index</span><span style="color:#E1E4E8;">: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">article</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&#39;title&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;intro&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;author&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;tags&#39;</span><span style="color:#E1E4E8;">],</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">user</span><span style="color:#E1E4E8;">: [</span><span style="color:#9ECBFF;">&#39;email&#39;</span><span style="color:#E1E4E8;">]</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h3 id="setuplist" tabindex="-1">setupList <a class="header-anchor" href="#setuplist" aria-label="Permalink to &quot;setupList&quot;">​</a></h3><p>Controller method where we define how resource is browsed, filtered and sorted in list view.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">setupList</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">({</span><span style="color:#FFAB70;">list</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">query</span><span style="color:#E1E4E8;">}) {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">addCreateControl</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Create new tag&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    list.</span><span style="color:#B392F0;">addFilter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;TextFormElement&#39;</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;title&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        label: </span><span style="color:#9ECBFF;">&#39;Title&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    list.</span><span style="color:#B392F0;">addItem</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;TextListItem&#39;</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        caption: </span><span style="color:#9ECBFF;">&#39;ID&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        mapTo: </span><span style="color:#9ECBFF;">&#39;id&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    list.</span><span style="color:#B392F0;">addItem</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;LinkListItem&#39;</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        caption: </span><span style="color:#9ECBFF;">&#39;Title&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        mapTo: </span><span style="color:#9ECBFF;">&#39;title&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        action: </span><span style="color:#9ECBFF;">&#39;editItem&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    });</span></span>\n<span class="line"><span style="color:#E1E4E8;">},</span></span></code></pre></div><p>Following arguments are available:</p><ul><li>list: instance of <a href="#resource-list">resourceList</a> object</li><li>query: current resource query parameters (filters, sort, page...)</li></ul><h3 id="setupedit" tabindex="-1">setupEdit <a class="header-anchor" href="#setupedit" aria-label="Permalink to &quot;setupEdit&quot;">​</a></h3><p>Controller method where we define form fields rendered when resource is created or updated.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">setupEdit</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">({</span><span style="color:#FFAB70;">edit</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">method</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">resourceModel</span><span style="color:#E1E4E8;">}) {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">addToIndexControl</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">addSaveControl</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    edit.</span><span style="color:#B392F0;">addField</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;TextFormElement&#39;</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        label: </span><span style="color:#9ECBFF;">&#39;Title&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;title&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>Following arguments are available:</p><ul><li>edit: instance of <a href="#resource-edit">editHandler</a> object</li><li>method: current resource authoring context (&#39;edit&#39; or &#39;create&#39;)</li><li>resourceModel: instance of resource model that is currently edited (or created)</li></ul><h3 id="openindex" tabindex="-1">openIndex <a class="header-anchor" href="#openindex" aria-label="Permalink to &quot;openIndex&quot;">​</a></h3><p>Controller instance method which opens resource index or listing.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">controller.</span><span style="color:#B392F0;">openIndex</span><span style="color:#E1E4E8;">(queryParams);</span></span></code></pre></div><h3 id="openedit" tabindex="-1">openEdit <a class="header-anchor" href="#openedit" aria-label="Permalink to &quot;openEdit&quot;">​</a></h3><p>Controller instance method which opens resource editing.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">controller.</span><span style="color:#B392F0;">openEdit</span><span style="color:#E1E4E8;">(routeParams, queryParams);</span></span></code></pre></div><h3 id="opencreate" tabindex="-1">openCreate <a class="header-anchor" href="#opencreate" aria-label="Permalink to &quot;openCreate&quot;">​</a></h3><p>Controller instance method which opens resource create.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">controller.</span><span style="color:#B392F0;">openCreate</span><span style="color:#E1E4E8;">(queryParams);</span></span></code></pre></div><h3 id="addcreatecontrol" tabindex="-1">addCreateControl <a class="header-anchor" href="#addcreatecontrol" aria-label="Permalink to &quot;addCreateControl&quot;">​</a></h3><p>Controller instance method which adds resource create control.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">controller.</span><span style="color:#B392F0;">addCreateControl</span><span style="color:#E1E4E8;">(caption);</span></span></code></pre></div><h3 id="addsavecontrol" tabindex="-1">addSaveControl <a class="header-anchor" href="#addsavecontrol" aria-label="Permalink to &quot;addSaveControl&quot;">​</a></h3><p>Controller instance method which adds resource save control.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">controller.</span><span style="color:#B392F0;">addSaveControl</span><span style="color:#E1E4E8;">(caption);</span></span></code></pre></div><h3 id="addtoindexcontrol" tabindex="-1">addToIndexControl <a class="header-anchor" href="#addtoindexcontrol" aria-label="Permalink to &quot;addToIndexControl&quot;">​</a></h3><p>Controller instance method which adds resource list control.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">controller.</span><span style="color:#B392F0;">addToIndexControl</span><span style="color:#E1E4E8;">();</span></span></code></pre></div><h3 id="addcontrol" tabindex="-1">addControl <a class="header-anchor" href="#addcontrol" aria-label="Permalink to &quot;addControl&quot;">​</a></h3><p>Controller instance method which adds generic resource control.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">controller.</span><span style="color:#B392F0;">addControl</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">    caption: </span><span style="color:#9ECBFF;">&#39;myControl&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    url: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">getCreateUrl</span><span style="color:#E1E4E8;">(),</span></span>\n<span class="line"><span style="color:#E1E4E8;">    className: </span><span style="color:#9ECBFF;">&#39;accented iconPlus&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    action: </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.openCreate</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><h3 id="adddropdowncontrol" tabindex="-1">addDropdownControl <a class="header-anchor" href="#adddropdowncontrol" aria-label="Permalink to &quot;addDropdownControl&quot;">​</a></h3><p>Controller instance method which adds generic dropdown resource control.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">controller.</span><span style="color:#B392F0;">addDropdownControl</span><span style="color:#E1E4E8;">(params);</span></span></code></pre></div><h2 id="resource-list" tabindex="-1">Resource list <a class="header-anchor" href="#resource-list" aria-label="Permalink to &quot;Resource list&quot;">​</a></h2><p>Resource list is component responsible for handling resource browsing, filtering and sorting. Examine <a href="/trim/list-elements.html">list elements</a> chapter to find out how each list element is configured.</p><h3 id="additem" tabindex="-1">addItem <a class="header-anchor" href="#additem" aria-label="Permalink to &quot;addItem&quot;">​</a></h3><p>Method for defining what elements are displayed when resource is listed:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">addItem</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;TextListItem&#39;</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    caption: </span><span style="color:#9ECBFF;">&#39;Title&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    mapTo: </span><span style="color:#9ECBFF;">&#39;title&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><h3 id="addfilter" tabindex="-1">addFilter <a class="header-anchor" href="#addfilter" aria-label="Permalink to &quot;addFilter&quot;">​</a></h3><p>Method for adding filter form elements when resource is listed:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">addFilter</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;TextFormElement&#39;</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&#39;title&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    label: </span><span style="color:#9ECBFF;">&#39;Title&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><h3 id="addsort" tabindex="-1">addSort <a class="header-anchor" href="#addsort" aria-label="Permalink to &quot;addSort&quot;">​</a></h3><p>Method for adding sort options on resource list:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">addSort</span><span style="color:#E1E4E8;">([</span></span>\n<span class="line"><span style="color:#E1E4E8;">    {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        label: </span><span style="color:#9ECBFF;">&#39;By title&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        field: </span><span style="color:#9ECBFF;">&#39;-title&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#E1E4E8;">    {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        label: </span><span style="color:#9ECBFF;">&#39;By date&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        field: </span><span style="color:#9ECBFF;">&#39;-date&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">]);</span></span></code></pre></div><h3 id="filteralwaysby" tabindex="-1">filterAlwaysBy <a class="header-anchor" href="#filteralwaysby" aria-label="Permalink to &quot;filterAlwaysBy&quot;">​</a></h3><p>Method for setting persistent api filters.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">filterAlwaysBy</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;deleted&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;no&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#6A737D;">// or</span></span>\n<span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">filterAlwaysBy</span><span style="color:#E1E4E8;">({deleted: </span><span style="color:#9ECBFF;">&#39;no&#39;</span><span style="color:#E1E4E8;">});</span></span></code></pre></div><h3 id="filterinitiallyby" tabindex="-1">filterInitiallyBy <a class="header-anchor" href="#filterinitiallyby" aria-label="Permalink to &quot;filterInitiallyBy&quot;">​</a></h3><p>Method for setting initial api and UI filters.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">filterInitiallyBy</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;published&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;yes&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#6A737D;">// or</span></span>\n<span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">filterInitiallyBy</span><span style="color:#E1E4E8;">({published: </span><span style="color:#9ECBFF;">&#39;yes&#39;</span><span style="color:#E1E4E8;">});</span></span></code></pre></div><h3 id="refreshitems" tabindex="-1">refreshItems <a class="header-anchor" href="#refreshitems" aria-label="Permalink to &quot;refreshItems&quot;">​</a></h3><p>Call to refresh current list context content</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">refreshItems</span><span style="color:#E1E4E8;">();</span></span></code></pre></div><h3 id="settemplate" tabindex="-1">setTemplate <a class="header-anchor" href="#settemplate" aria-label="Permalink to &quot;setTemplate&quot;">​</a></h3><p>Method for choosing which template is used for resource listing (&#39;table&#39; and &#39;cards&#39; are currently supported).</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">setTemplate</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;cards&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><h3 id="addmassaction" tabindex="-1">addMassAction <a class="header-anchor" href="#addmassaction" aria-label="Permalink to &quot;addMassAction&quot;">​</a></h3><p>Method for adding mass actions to resource list.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">list.</span><span style="color:#B392F0;">addMassAction</span><span style="color:#E1E4E8;">([</span></span>\n<span class="line"><span style="color:#E1E4E8;">    {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        caption: </span><span style="color:#9ECBFF;">&#39;Publish&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        updateAttributes: {published: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">}</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">]);</span></span></code></pre></div><h2 id="resource-edit" tabindex="-1">Resource edit <a class="header-anchor" href="#resource-edit" aria-label="Permalink to &quot;Resource edit&quot;">​</a></h2><p>Resource edit is component responsible for handling how resource is created or updated.</p><h3 id="addfield" tabindex="-1">addField <a class="header-anchor" href="#addfield" aria-label="Permalink to &quot;addField&quot;">​</a></h3><p>Method for defining what form elements are mapped to resource attributes and relations when resource is edited or created. Examine <a href="/trim/form-elements.html">form elements</a> chapter to find out how each form element is configured.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">edit.</span><span style="color:#B392F0;">addField</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;TextFormElement&#39;</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    label: </span><span style="color:#9ECBFF;">&#39;Title&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&#39;title&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><h3 id="showfield" tabindex="-1">showField <a class="header-anchor" href="#showfield" aria-label="Permalink to &quot;showField&quot;">​</a></h3><p>Show edit form field:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">edit.</span><span style="color:#B392F0;">showField</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;title&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><h3 id="hidefield" tabindex="-1">hideField <a class="header-anchor" href="#hidefield" aria-label="Permalink to &quot;hideField&quot;">​</a></h3><p>Show edit form field:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">edit.</span><span style="color:#B392F0;">hideField</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;title&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><h3 id="togglefield" tabindex="-1">toggleField <a class="header-anchor" href="#togglefield" aria-label="Permalink to &quot;toggleField&quot;">​</a></h3><p>Toggle edit form field (use second boolean argument to show or hide field)</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">edit.</span><span style="color:#B392F0;">toggleField</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;title&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><h3 id="updatefield" tabindex="-1">updateField <a class="header-anchor" href="#updatefield" aria-label="Permalink to &quot;updateField&quot;">​</a></h3><p>Update edit field value and options / props</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">edit.</span><span style="color:#B392F0;">updateField</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;title&#39;</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    value: </span><span style="color:#9ECBFF;">&#39;Foo&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><h3 id="updateallfields" tabindex="-1">updateAllFields <a class="header-anchor" href="#updateallfields" aria-label="Permalink to &quot;updateAllFields&quot;">​</a></h3><p>Update all edit fields options</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">edit.</span><span style="color:#B392F0;">updateAllFields</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">    editable: </span><span style="color:#79B8FF;">false</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><h3 id="observe" tabindex="-1">observe <a class="header-anchor" href="#observe" aria-label="Permalink to &quot;observe&quot;">​</a></h3><p>Observe and respond to form field value changes:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">edit.</span><span style="color:#B392F0;">observe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;formData.title&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Title changed: &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> value);</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><h3 id="allowsave" tabindex="-1">allowSave <a class="header-anchor" href="#allowsave" aria-label="Permalink to &quot;allowSave&quot;">​</a></h3><p>Allow or disallow resource saving:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">edit.</span><span style="color:#B392F0;">allowSave</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><h3 id="configurelayout" tabindex="-1">configureLayout <a class="header-anchor" href="#configurelayout" aria-label="Permalink to &quot;configureLayout&quot;">​</a></h3><p>Method for configuring edit and create layout. Supports tabs, regions and groups (all items are auto generated from layout reference).</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;">// assign form element to layout region (main and side regions are supported) position with layoutReference</span></span>\n<span class="line"><span style="color:#E1E4E8;">edit.</span><span style="color:#B392F0;">addField</span><span style="color:#E1E4E8;">(TextFormElement, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    label: </span><span style="color:#9ECBFF;">&#39;Title&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&#39;title&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    layoutReference: </span><span style="color:#9ECBFF;">&#39;mainRegion&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">edit.</span><span style="color:#B392F0;">addField</span><span style="color:#E1E4E8;">(TextFormElement, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    label: </span><span style="color:#9ECBFF;">&#39;Meta data&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&#39;meta&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    layoutReference: </span><span style="color:#9ECBFF;">&#39;sideRegion&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><p>Altering layout configuration to set tab captions:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;">// configure tab layout caption</span></span>\n<span class="line"><span style="color:#E1E4E8;">edit.</span><span style="color:#B392F0;">configureLayout</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;mainTab.caption&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;Content and settings&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;seoTab.caption&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;SEO and meta data&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#6A737D;">// assign form element to layout position with layoutReference</span></span>\n<span class="line"><span style="color:#E1E4E8;">editHandler.</span><span style="color:#B392F0;">addField</span><span style="color:#E1E4E8;">(TextFormElement, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    label: </span><span style="color:#9ECBFF;">&#39;Title&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&#39;title&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    layoutReference: </span><span style="color:#9ECBFF;">&#39;mainTab.mainRegion&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><h3 id="selecttab" tabindex="-1">selectTab <a class="header-anchor" href="#selecttab" aria-label="Permalink to &quot;selectTab&quot;">​</a></h3><p>Select edit layout tab:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">edit.</span><span style="color:#B392F0;">selectTab</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;main&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><h2 id="services" tabindex="-1">Services <a class="header-anchor" href="#services" aria-label="Permalink to &quot;Services&quot;">​</a></h2><p>Application utilizes simple service container to register and locate components and services. All form and list components are registered and retrieved from service container by default.</p><p>Your resource controllers should also be registered as services. We encourage you to do so with dynamic import to utilize webpack code splitting and load controller code only when it is requested.</p><p>A typical service container with navigation and few registered controllers looks something like this:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">MainNavigation</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./controllers/mainNavigation.js&#39;</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">PageController</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./controllers/page.js&#39;</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">TagController</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;./controllers/tag.js&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><p>If you need to access service container manually somewhere in your code:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> serviceContainer </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;trim/library/serviceContainer.js&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">serviceContainer.</span><span style="color:#B392F0;">register</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myService&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span><span style="color:#B392F0;">foo</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;">});</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">serviceContainer.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myService&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">myService</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(myService.foo); </span><span style="color:#6A737D;">// outputs bar</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><h2 id="router" tabindex="-1">Router <a class="header-anchor" href="#router" aria-label="Permalink to &quot;Router&quot;">​</a></h2><p>Application utilizes extended <a href="https://router.vuejs.org/" target="_blank" rel="noreferrer">VueJS router</a> for linking and routing needs. Your application routes typically look something like this:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">router</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    router.</span><span style="color:#B392F0;">controller</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;dashboard&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Page@index&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    router.</span><span style="color:#B392F0;">resource</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;page&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">    router.</span><span style="color:#B392F0;">resource</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;tag&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    router.</span><span style="color:#B392F0;">controller</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;my-settings&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;mySettings&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;MySettings&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h3 id="router-controller" tabindex="-1">Router.controller <a class="header-anchor" href="#router-controller" aria-label="Permalink to &quot;Router.controller&quot;">​</a></h3><p>Method for defining routes with controller components.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">router.</span><span style="color:#B392F0;">controller</span><span style="color:#E1E4E8;">(path, routeName, controllerString);</span></span>\n<span class="line"><span style="color:#6A737D;">// ... is somewhat equivalent to...</span></span>\n<span class="line"><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">addRoute</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">    path: </span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> path,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    name: routeName,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    component: AdminDefault,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    props: </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// set controller from service registry as child component of Default Admin component</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// if method is defined it will be called after component is created</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><h3 id="router-resource" tabindex="-1">Router.resource <a class="header-anchor" href="#router-resource" aria-label="Permalink to &quot;Router.resource&quot;">​</a></h3><p>Router resource method is a shortcut for defining 3 most used routes for resource:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">router.</span><span style="color:#B392F0;">resource</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;tag&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#6A737D;">// ... is equivalent to...</span></span>\n<span class="line"><span style="color:#E1E4E8;">router.</span><span style="color:#B392F0;">controller</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;tag/create&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;resource.tag.create&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Tag@create&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">router.</span><span style="color:#B392F0;">controller</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;tag/:id&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;resource.tag.edit&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Tag@edit&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">router.</span><span style="color:#B392F0;">controller</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;tag&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;resource.tag.index&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Tag@index&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><h3 id="generating-links" tabindex="-1">Generating links <a class="header-anchor" href="#generating-links" aria-label="Permalink to &quot;Generating links&quot;">​</a></h3><p>Generate links with router via route names and params:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">router.</span><span style="color:#B392F0;">url</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;resource.tag.index&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// /tag;</span></span>\n<span class="line"><span style="color:#E1E4E8;">router.</span><span style="color:#B392F0;">url</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;resource.tag.edit&#39;</span><span style="color:#E1E4E8;">, {id: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">}) </span><span style="color:#6A737D;">// /tag/2;</span></span>\n<span class="line"><span style="color:#E1E4E8;">router.</span><span style="color:#B392F0;">url</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;resource.tag.edit&#39;</span><span style="color:#E1E4E8;">, {id: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">}, {foo: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">}) </span><span style="color:#6A737D;">// /tag/2?foo=3;</span></span></code></pre></div><h2 id="navigation" tabindex="-1">Navigation <a class="header-anchor" href="#navigation" aria-label="Permalink to &quot;Navigation&quot;">​</a></h2><p>Navigation component is used to define main user navigation UI element. Navigation links, user panel links, application name and current username are all defined in navigation component.</p><h3 id="code-example" tabindex="-1">Code example <a class="header-anchor" href="#code-example" aria-label="Permalink to &quot;Code example&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getNavigationItems</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">router</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            caption: </span><span style="color:#9ECBFF;">&#39;Pages&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            key: </span><span style="color:#9ECBFF;">&#39;page&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            url: router.</span><span style="color:#B392F0;">url</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;resource.page.index&#39;</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#E1E4E8;">            icon: </span><span style="color:#9ECBFF;">&#39;Home&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        },</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            caption: </span><span style="color:#9ECBFF;">&#39;Articles&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            key: </span><span style="color:#9ECBFF;">&#39;article&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            url: router.</span><span style="color:#B392F0;">url</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;resource.article.index&#39;</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#E1E4E8;">            icon: </span><span style="color:#9ECBFF;">&#39;Copy&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        },</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            caption: </span><span style="color:#9ECBFF;">&#39;Misc&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            icon: </span><span style="color:#9ECBFF;">&#39;ThreeDots&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            subItems: [</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">                {</span></span>\n<span class="line"><span style="color:#E1E4E8;">                    caption: </span><span style="color:#9ECBFF;">&#39;Categories&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">                    key: </span><span style="color:#9ECBFF;">&#39;category&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">                    url: router.</span><span style="color:#B392F0;">url</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;resource.category.index&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">                },</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">                {</span></span>\n<span class="line"><span style="color:#E1E4E8;">                    caption: </span><span style="color:#9ECBFF;">&#39;Tags&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">                    key: </span><span style="color:#9ECBFF;">&#39;tag&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">                    url: router.</span><span style="color:#B392F0;">url</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;resource.tag.index&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">                }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">            ]</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    ],</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getUserNavigationItems</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">router</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> [</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            caption: </span><span style="color:#9ECBFF;">&#39;My settings&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            url: router.</span><span style="color:#B392F0;">url</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mySettings&#39;</span><span style="color:#E1E4E8;">),</span></span>\n<span class="line"><span style="color:#E1E4E8;">            appLink: </span><span style="color:#79B8FF;">true</span></span>\n<span class="line"><span style="color:#E1E4E8;">        },</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            caption: </span><span style="color:#9ECBFF;">&#39;Public pages&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            url: </span><span style="color:#9ECBFF;">&#39;http://mySite.com&#39;&#39;</span><span style="color:#FDAEB7;font-style:italic;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            newTab: </span><span style="color:#79B8FF;">true</span></span>\n<span class="line"><span style="color:#E1E4E8;">        },</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        {</span></span>\n<span class="line"><span style="color:#E1E4E8;">            caption: </span><span style="color:#9ECBFF;">&#39;Show search&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#B392F0;">action</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">mainNavigation</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> mainNavigation.</span><span style="color:#B392F0;">showSearch</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">()</span></span>\n<span class="line"><span style="color:#E1E4E8;">        }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    ],</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getProjectCaption</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Trikoder CMS&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">getUserCaption</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Demo user&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h3 id="getnavigationitems" tabindex="-1">getNavigationItems <a class="header-anchor" href="#getnavigationitems" aria-label="Permalink to &quot;getNavigationItems&quot;">​</a></h3><p>Method &quot;getNavigationItems&quot; takes array of objects with following keys:</p><ul><li>caption: for item caption</li><li>key: prefix for &quot;Link&quot; class name</li><li>url: url to point to</li><li>icon: adds sufix to element icon classname (all current icon suffixes can be found in &quot;/src/scss/library/_variables.scss&quot; file, under $icons variable)</li></ul><h3 id="getusernavigationitems" tabindex="-1">getUserNavigationItems <a class="header-anchor" href="#getusernavigationitems" aria-label="Permalink to &quot;getUserNavigationItems&quot;">​</a></h3><p>Method &quot;getUserNavigationItems&quot; takes array of objects with following keys:</p><ul><li>caption: for item caption</li><li>url : url to point to</li><li>action: if url is ommited, application calls this function with mainNavigation as argument</li><li>appLink: Boolean value, true is in app link</li><li>newTab: adds target=&quot;_blank&quot; attribute to link</li><li>icon: adds sufix to element icon classname (all current icon suffixes can be found in &quot;/src/scss/library/_variables.scss&quot; file, under $icons variable)</li></ul><h3 id="getprojectcaption" tabindex="-1">getProjectCaption <a class="header-anchor" href="#getprojectcaption" aria-label="Permalink to &quot;getProjectCaption&quot;">​</a></h3><p>Use method &quot;getProjectCaption&quot; to set CMS project name.</p><h3 id="getusercaption" tabindex="-1">getUserCaption <a class="header-anchor" href="#getusercaption" aria-label="Permalink to &quot;getUserCaption&quot;">​</a></h3><p>Use method &quot;getUserCaption&quot; to set current user caption.</p><h2 id="application" tabindex="-1">Application <a class="header-anchor" href="#application" aria-label="Permalink to &quot;Application&quot;">​</a></h2><p>Application object is glue that ties all CMS components and services together. It is used to connect services and routes, load translations, inject boot (config) data and start application.</p><h3 id="code-example-1" tabindex="-1">Code example <a class="header-anchor" href="#code-example-1" aria-label="Permalink to &quot;Code example&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> app </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;trim/app.js&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> translations </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;trim/lang/english.js&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> routes </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./routes.js&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> services </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./services.js&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./scss/main.scss&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">app</span></span>\n<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">loadTranslations</span><span style="color:#E1E4E8;">(translations, </span><span style="color:#9ECBFF;">&#39;en&#39;</span><span style="color:#E1E4E8;">)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">registerServices</span><span style="color:#E1E4E8;">(services)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">registerRoutes</span><span style="color:#E1E4E8;">(routes)</span></span>\n<span class="line"><span style="color:#E1E4E8;">    .</span><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">();</span></span></code></pre></div><h3 id="registerservices" tabindex="-1">registerServices <a class="header-anchor" href="#registerservices" aria-label="Permalink to &quot;registerServices&quot;">​</a></h3><p>Used to register user defined services to service container.</p><h3 id="registerroutes" tabindex="-1">registerRoutes <a class="header-anchor" href="#registerroutes" aria-label="Permalink to &quot;registerRoutes&quot;">​</a></h3><p>Used to register user defined routes to route registry.</p><h3 id="loadtranslations" tabindex="-1">loadTranslations <a class="header-anchor" href="#loadtranslations" aria-label="Permalink to &quot;loadTranslations&quot;">​</a></h3><p>Used to import translation data for specific locale.</p><h3 id="setlocale" tabindex="-1">setLocale <a class="header-anchor" href="#setlocale" aria-label="Permalink to &quot;setLocale&quot;">​</a></h3><p>Used to set application locale.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">setLocale</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;hr&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// en by default</span></span></code></pre></div><h3 id="getlocale" tabindex="-1">getLocale <a class="header-anchor" href="#getlocale" aria-label="Permalink to &quot;getLocale&quot;">​</a></h3><p>Used to get application locale.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">getLocale</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// en by default;</span></span></code></pre></div><h3 id="beforeadminenter" tabindex="-1">beforeAdminEnter <a class="header-anchor" href="#beforeadminenter" aria-label="Permalink to &quot;beforeAdminEnter&quot;">​</a></h3><p>Used to set Promise function before creating admin instance.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">beforeAdminEnter</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> { </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(); });</span></span></code></pre></div><h3 id="start" tabindex="-1">start <a class="header-anchor" href="#start" aria-label="Permalink to &quot;start&quot;">​</a></h3><p>Once called application will setup router, services and main view components.</p><h2 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;Configuration&quot;">​</a></h2><p>Trim based application is configured by setting boot (or config) data in your main entry point. Anything can be inserted in boot data storage, only &quot;baseUrl&quot; and &quot;baseApiUrl&quot; are mandatory.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">setBootData</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">    baseUrl: p<wbr>rocess.env.</span><span style="color:#79B8FF;">BASE_URL</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    baseApiUrl: p<wbr>rocess.env.</span><span style="color:#79B8FF;">BASE_API_URL</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><h3 id="use-browser-history-api" tabindex="-1">Use browser history api <a class="header-anchor" href="#use-browser-history-api" aria-label="Permalink to &quot;Use browser history api&quot;">​</a></h3><p>Configure Trim application to use browser history api.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">setBootData</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">    usesPushState: </span><span style="color:#79B8FF;">true</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><h3 id="using-patch-for-resource-updates" tabindex="-1">Using patch for resource updates <a class="header-anchor" href="#using-patch-for-resource-updates" aria-label="Permalink to &quot;Using patch for resource updates&quot;">​</a></h3><p>Api adapter can be instructed to use &#39;PATCH&#39; insted of &#39;PUT&#39; method when updating JSON api resources.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">setBootData</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">    usePatchForUpdate: </span><span style="color:#79B8FF;">true</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><h3 id="configuring-resource-url-slugs" tabindex="-1">Configuring resource url slugs <a class="header-anchor" href="#configuring-resource-url-slugs" aria-label="Permalink to &quot;Configuring resource url slugs&quot;">​</a></h3><p>JSON api resource url slugs can be customized via &#39;resourceToApiMap&#39; config property. Used this when JSON api resource type is not directly mapped to resource api url.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">setBootData</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">    resourceToApiMap: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        article: </span><span style="color:#9ECBFF;">&#39;articles&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">        user: </span><span style="color:#9ECBFF;">&#39;users&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><h3 id="api-pagination-strategies" tabindex="-1">Api pagination strategies <a class="header-anchor" href="#api-pagination-strategies" aria-label="Permalink to &quot;Api pagination strategies&quot;">​</a></h3><p>Trim comes with offset (default) and page based pagination strategies included. Customize offset based strategy (creates api query like ?page[offset]=0&amp;page[limit]=15):</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">setBootData</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">    apiPagination: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        strategy: </span><span style="color:#9ECBFF;">&#39;offsetBased&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        offsetKey: </span><span style="color:#9ECBFF;">&#39;offset&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        limitKey: </span><span style="color:#9ECBFF;">&#39;limit&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><p>Set and customize page based strategy (creates api query like ?page[number]=1&amp;page[size]=15):</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">setBootData</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">    apiPagination: {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        strategy: </span><span style="color:#9ECBFF;">&#39;pageBased&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        numberKey: </span><span style="color:#9ECBFF;">&#39;number&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">        limitKey: </span><span style="color:#9ECBFF;">&#39;size&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><h3 id="validation-error-field" tabindex="-1">Validation error field <a class="header-anchor" href="#validation-error-field" aria-label="Permalink to &quot;Validation error field&quot;">​</a></h3><p>Configure error message lookup field when resource model has validation errors.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">setBootData</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">    validationErrorField: </span><span style="color:#9ECBFF;">&#39;detail&#39;</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><h3 id="other-boot-data-keys" tabindex="-1">Other boot data keys <a class="header-anchor" href="#other-boot-data-keys" aria-label="Permalink to &quot;Other boot data keys&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">setBootData</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"><span style="color:#E1E4E8;">    toggleColumnsVisibility: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// activate toggle list table columns visibility feature, default is FALSE</span></span>\n<span class="line"><span style="color:#E1E4E8;">    itemsPerPage: </span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// default number of items per page</span></span>\n<span class="line"><span style="color:#E1E4E8;">    googleMapsApiKey: </span><span style="color:#9ECBFF;">&#39;123123&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// api key for google maps</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ckEditorPath: </span><span style="color:#9ECBFF;">&#39;https://cdn.ckeditor.com/4.10.0/standard-all/&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// ckeditor CDN</span></span>\n<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><h3 id="access-boot-data-outside-of-main-entry-point" tabindex="-1">Access boot data outside of main entry point. <a class="header-anchor" href="#access-boot-data-outside-of-main-entry-point" aria-label="Permalink to &quot;Access boot data outside of main entry point.&quot;">​</a></h3><p>Boot data can later be retrieved like so:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> bootData </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;trim/library/bootData.js&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#B392F0;">bootData</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;baseUrl&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// outputs boot data baseUrl value</span></span></code></pre></div><h2 id="authentication" tabindex="-1">Authentication <a class="header-anchor" href="#authentication" aria-label="Permalink to &quot;Authentication&quot;">​</a></h2><p>To authenticating users to your app you have to implement simple authentication driver. Default view for authenticating with username and password is included in Trim. Examine <a href="https://github.com/trikoder/trim/tree/master/src/js/library/auth.js" target="_blank" rel="noreferrer">base auth api</a> for full implementation details. Simple driver implementation is shown bellow:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> api </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;trim/library/api.js&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> auth </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;trim/library/auth.js&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> auth.</span><span style="color:#B392F0;">extend</span><span style="color:#E1E4E8;">({</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">isUserLogged</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Boolean</span><span style="color:#E1E4E8;">(localStorage.</span><span style="color:#B392F0;">getItem</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;accessToken&#39;</span><span style="color:#E1E4E8;">));</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">loginWithCredentials</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">credentials</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">reject</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (credentials.username.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> credentials.password.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;">) {</span></span>\n<span class="line"><span style="color:#E1E4E8;">                localStorage.</span><span style="color:#B392F0;">setItem</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;accessToken&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;testToken&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">();</span></span>\n<span class="line"><span style="color:#E1E4E8;">            } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#B392F0;">reject</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Login failed&#39;</span><span style="color:#E1E4E8;">));</span></span>\n<span class="line"><span style="color:#E1E4E8;">            }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        });</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">onAuthorization</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        api.defaults.headers.common.Authorization </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;Bearer &#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> localStorage.</span><span style="color:#B392F0;">getItem</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;accessToken&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">onDeauthorization</span><span style="color:#E1E4E8;">() {</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">        localStorage.</span><span style="color:#B392F0;">removeItem</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;accessToken&#39;</span><span style="color:#E1E4E8;">);</span></span>\n<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;"> api.defaults.headers.common.Authorization;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><p>Inform application that you want to use auth driver you implemented:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;">// app.js</span></span>\n<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> auth </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./auth.js&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#F97583;">...</span></span>\n<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">useAuth</span><span style="color:#E1E4E8;">(auth);</span></span></code></pre></div>', 208);
const _hoisted_209 = [
  _hoisted_1
];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", null, _hoisted_209);
}
const coreConceptsAndApi = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export {
  __pageData,
  coreConceptsAndApi as default
};
