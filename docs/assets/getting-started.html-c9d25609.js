import{_ as r,r as s,o as i,c as o,a,b as e,d as n,e as d}from"./app-b484721a.js";const l={},c=a("h1",{id:"getting-started",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#getting-started","aria-hidden":"true"},"#"),e(" Getting started")],-1),p={href:"http://jsonapi.org/",target:"_blank",rel:"noopener noreferrer"},u={href:"http://jsonapi.org/examples/",target:"_blank",rel:"noopener noreferrer"},h={href:"https://github.com/trikoder/trim/tree/master/demo",target:"_blank",rel:"noopener noreferrer"},m=a("h2",{id:"starter-template",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#starter-template","aria-hidden":"true"},"#"),e(" Starter template")],-1),g={href:"https://github.com/trikoder/trim-starter/",target:"_blank",rel:"noopener noreferrer"},b=d(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone git@github.com:trikoder/trim-starter.git my-cms-project
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Make sure you have Node.js (8.x and up) and NPM installed.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> my-cms-project
<span class="token function">npm</span> <span class="token function">install</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Once modules are installed run dev command.</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Your new CMS project should greet you now with welcome page running at localhost.</p>`,6);function _(f,v){const t=s("ExternalLinkIcon");return i(),o("div",null,[c,a("p",null,[e("Before digging into UI code make sure you have a basic understanding of core json api concepts (how relations, attributes, getting, creating and updating resources work). A functional backend api compliant with json api standard is prerequisite for building UI. Browse "),a("a",p,[e("json:api webpage"),n(t)]),e(" and "),a("a",u,[e("examples"),n(t)]),e(" to familiarize yourself with standard.")]),a("p",null,[e("Everything explained in this chapter has concrete implementation details in demo application codebase. Feel free to "),a("a",h,[e("browse demo codebase"),n(t)]),e(" and take what you need.")]),m,a("p",null,[e("Starter template for bootstrapping projects built with Trikoder Trim is available at "),a("a",g,[e("trim-starter git repository"),n(t)]),e(".")]),b])}const x=r(l,[["render",_],["__file","getting-started.html.vue"]]);export{x as default};
